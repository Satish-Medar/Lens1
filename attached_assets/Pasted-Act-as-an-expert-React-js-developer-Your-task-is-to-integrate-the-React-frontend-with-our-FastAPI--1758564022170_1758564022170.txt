Act as an expert React.js developer.

Your task is to integrate the React frontend with our FastAPI backend. You will create one new file and modify three existing component files to fetch and display data.

1. First, create the following NEW file:

New File: frontend/src/api/apiService.js

JavaScript

import axios from 'axios';
// The base URL for our backend API
const API_BASE_URL = 'http://127.0.0.1:8000/api/v1';

/**

Fetches the clean district data from the backend.
*/
export const fetchDistrictData = async () => {
try {
const response = await axios.get(${API_BASE_URL}/district-data);
return response.data;
} catch (error) {
console.error("Error fetching district data:", error);
throw error; // Re-throw the error to be handled by the component
}
};

/**

Fetches the AHP recommendations from the backend.
*/
export const fetchRecommendations = async () => {
try {
const response = await axios.get(${API_BASE_URL}/recommendations);
return response.data;
} catch (error) {
console.error("Error fetching recommendations:", error);
throw error;
}
};


**2. Second, provide the code to MODIFY the following three files:**
File to Modify: frontend/src/pages/Dashboard.jsx

JavaScript

import React, { useState, useEffect } from 'react';
import DashboardLayout from '../components/DashboardLayout';
import MapComponent from '../components/MapComponent';
import ChartComponent from '../components/ChartComponent';
import { fetchDistrictData, fetchRecommendations } from '../api/apiService';
const Controls = ({ onAnalysisClick, loading }) => (

const Dashboard = () => {
const [districtData, setDistrictData] = useState([]);
const [recommendations, setRecommendations] = useState([]);
const [loading, setLoading] = useState(false);
const [error, setError] = useState(null);

// Fetch initial district data when the component loads
useEffect(() => {
const loadData = async () => {
try {
setError(null);
setLoading(true);
const data = await fetchDistrictData();
setDistrictData(data);
} catch (err) {
setError("Failed to load district data.");
} finally {
setLoading(false);
}
};
loadData();
}, []); // Empty array means this runs only once on mount

// Handle the click event for the analysis button
const handleAnalysisClick = async () => {
try {
setError(null);
setLoading(true);
const recs = await fetchRecommendations();
setRecommendations(recs);
} catch (err) {
setError("Failed to run analysis.");
} finally {
setLoading(false);
}
};

return (
<DashboardLayout
map={}
chart={}
controls={}
/>
);
};

export default Dashboard;


-----
File to Modify: frontend/src/components/MapComponent.jsx

JavaScript

import React from 'react';
const MapComponent = ({ data, recommendations }) => {
return (

export default MapComponent;


-----
File to Modify: frontend/src/components/ChartComponent.jsx

JavaScript

import React from 'react';
const ChartComponent = ({ data }) => {
return (

export default ChartComponent;